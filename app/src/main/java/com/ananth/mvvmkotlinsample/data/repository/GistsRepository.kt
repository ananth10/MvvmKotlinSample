package com.ananth.mvvmkotlinsample.data.repository



import com.ananth.mvvmkotlinsample.data.local.dao.GistsDao
import com.ananth.mvvmkotlinsample.data.remote.NetworkBoundResource
import com.ananth.mvvmkotlinsample.data.remote.State
import com.ananth.mvvmkotlinsample.data.remote.api.GithubApiService
import com.ananth.mvvmkotlinsample.model.local.GistsEntity
import com.ananth.mvvmkotlinsample.utils.UserManager
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOn
import retrofit2.Response

class GistsRepository(private val githubApiService: GithubApiService, private val userManager: UserManager, private val gistsDao: GistsDao) {

    fun getUserGists():Flow<State<List<GistsEntity>>>{

        return object :NetworkBoundResource<List<GistsEntity>>(){
            override suspend fun fetchFromNetwork(): Response<List<GistsEntity>> =githubApiService.getGithubGists(userManager.getUserName())
            override suspend fun fetchFromDatabase(): Flow<List<GistsEntity>> =gistsDao.retrieveGistsList()

            override suspend fun saveRemoteDataToDatabase(gistsList: List<GistsEntity>) {
             gistsDao.deleteGistsTable() //deleting tables because duplicated entries are inserting due to PrimaryKey(autogenerated)
             gistsDao.insertGistsList(gistsList)
            }

        }.asFlow().flowOn(Dispatchers.IO)
    }
}